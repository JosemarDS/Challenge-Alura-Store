# -*- coding: utf-8 -*-
"""Challenge Alura Store

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QfILq5paO8zlEMZT7dGBrWVVMKIwrK29

### Importação dos dados
"""

import pandas as pd

url = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_1.csv"
url2 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_2.csv"
url3 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_3.csv"
url4 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science/refs/heads/main/base-de-dados-challenge-1/loja_4.csv"

loja = pd.read_csv(url)
loja2 = pd.read_csv(url2)
loja3 = pd.read_csv(url3)
loja4 = pd.read_csv(url4)

loja4.head()

"""#1. Análise do faturamento

"""

total_loja1 = loja['Preço'].sum()
total_loja2 = loja2['Preço'].sum()
total_loja3 = loja3['Preço'].sum()
total_loja4 = loja4['Preço'].sum()

print(f'Faturamento Loja 1: R${total_loja1}')
print(f'Faturamento Loja 2: R${total_loja2}')
print(f'Faturamento Loja 3: R${total_loja3}')
print(f'Faturamento Loja 4: R${total_loja4}')

import matplotlib.pyplot as plt

# Dados para o gráfico de pizza (substitua pelos seus dados reais)
labels = ['Loja 1', 'Loja 2', 'Loja 3', 'Loja 4']
sizes = [total_loja1, total_loja2, total_loja3, total_loja4]
colors = ['skyblue', 'lightcoral', 'lightgreen', 'gold']
explode = (0.1, 0, 0, 0)  # destaca a primeira fatia (ajuste conforme necessário)


# Criar o gráfico de pizza
plt.figure(figsize=(8, 8))  # Ajusta o tamanho da figura
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)
plt.title("Faturamento Total por Loja")
plt.axis('equal')  # garante que o gráfico seja um círculo
plt.show()

"""# 2. Vendas por Categoria

"""

categoria_vendas_loja = loja.groupby('Categoria do Produto')['Preço'].sum()
categoria_vendas_loja

categoria_vendas_loja2 = loja2.groupby('Categoria do Produto')['Preço'].sum()
categoria_vendas_loja2

categoria_vendas_loja3 = loja3.groupby('Categoria do Produto')['Preço'].sum()
categoria_vendas_loja3

categoria_vendas_loja4 = loja4.groupby('Categoria do Produto')['Preço'].sum()
categoria_vendas_loja4

import matplotlib.pyplot as plt

# Dados para o gráfico de barras (substitua pelos seus dados reais)
categorias = categoria_vendas_loja.index
valores_loja1 = categoria_vendas_loja.values
valores_loja2 = categoria_vendas_loja2.values
valores_loja3 = categoria_vendas_loja3.values
valores_loja4 = categoria_vendas_loja4.values


# Criar o gráfico de barras
largura_barra = 0.2  # Define a largura das barras

x = range(len(categorias))
plt.figure(figsize=(12, 6))  # Ajusta o tamanho da figura
plt.bar([i - 1.5 * largura_barra for i in x], valores_loja1, largura_barra, label='Loja 1')
plt.bar([i - 0.5 * largura_barra for i in x], valores_loja2, largura_barra, label='Loja 2')
plt.bar([i + 0.5 * largura_barra for i in x], valores_loja3, largura_barra, label='Loja 3')
plt.bar([i + 1.5 * largura_barra for i in x], valores_loja4, largura_barra, label='Loja 4')

plt.xlabel("Categoria do Produto")
plt.ylabel("Faturamento (R$)")
plt.title("Vendas por Categoria de Produto em cada Loja")
plt.xticks(x, categorias, rotation=45, ha='right')  # Rotaciona os rótulos do eixo x para melhor visualização
plt.legend()
plt.tight_layout() # Ajusta o layout para evitar sobreposição de elementos
plt.show()

"""# 3. Média de Avaliação das Lojas"""

average_rating_loja1 = loja['Avaliação da compra'].mean()
average_rating_loja2 = loja2['Avaliação da compra'].mean()
average_rating_loja3 = loja3['Avaliação da compra'].mean()
average_rating_loja4 = loja4['Avaliação da compra'].mean()

print(f"Média de avaliação da Loja 1: {average_rating_loja1}")
print(f"Média de avaliação da Loja 2: {average_rating_loja2}")
print(f"Média de avaliação da Loja 3: {average_rating_loja3}")
print(f"Média de avaliação da Loja 4: {average_rating_loja4}")

import matplotlib.pyplot as plt

# Dados das médias de avaliação (substitua pelos seus valores reais)
average_ratings = {
    'Loja 1': average_rating_loja1,
    'Loja 2': average_rating_loja2,
    'Loja 3': average_rating_loja3,
    'Loja 4': average_rating_loja4
}

# Criar o gráfico de barras
lojas = list(average_ratings.keys())
ratings = list(average_ratings.values())

plt.figure(figsize=(10, 6))
plt.bar(lojas, ratings, color=['skyblue', 'lightcoral', 'lightgreen', 'lightgoldenrodyellow'])
plt.xlabel('Lojas')
plt.ylabel('Média de Avaliação')
plt.title('Média de Avaliação das Lojas')
plt.ylim(0, 5)  # Definir o limite do eixo y de 0 a 5 para avaliações

# Adicionar os valores de avaliação em cima de cada barra
for i, v in enumerate(ratings):
    plt.text(i, v + 0.1, f'{v:.2f}', ha='center')


plt.show()

"""# 4. Produtos Mais e Menos Vendidos"""

def mais_menos_vendidos(df, store_name):
    produtos_vendidos = df.groupby('Produto')['Preço'].sum()
    mais_vendido = produtos_vendidos.idxmax()
    menos_vendido = produtos_vendidos.idxmin()
    print(f"Loja {store_name}:")
    print(f"Produto mais vendido: {mais_vendido} (R${produtos_vendidos.max():.2f})")
    print(f"Produto menos vendido: {menos_vendido} (R${produtos_vendidos.min():.2f})\n")


mais_menos_vendidos(loja, 1)
mais_menos_vendidos(loja2, 2)
mais_menos_vendidos(loja3, 3)
mais_menos_vendidos(loja4, 4)

import matplotlib.pyplot as plt

def plot_product_sales(df, store_name):
    produtos_vendidos = df.groupby('Produto')['Preço'].sum()
    produtos_vendidos = produtos_vendidos.sort_values(ascending=False)

    plt.figure(figsize=(12, 6))
    plt.bar(produtos_vendidos.index, produtos_vendidos.values)
    plt.xlabel("Produtos")
    plt.ylabel("Total de Vendas (R$)")
    plt.title(f"Produtos Mais e Menos Vendidos - Loja {store_name}")
    plt.xticks(rotation=90)  # Rotaciona os rótulos do eixo x para melhor legibilidade
    plt.tight_layout()  # Ajusta o layout para evitar sobreposição de elementos
    plt.show()

plot_product_sales(loja, 1)
plot_product_sales(loja2, 2)
plot_product_sales(loja3, 3)
plot_product_sales(loja4, 4)

"""# 5. Frete Médio por Loja

"""

average_shipping_loja1 = loja['Frete'].mean()
average_shipping_loja2 = loja2['Frete'].mean()
average_shipping_loja3 = loja3['Frete'].mean()
average_shipping_loja4 = loja4['Frete'].mean()

print(f"Frete médio da Loja 1: {average_shipping_loja1}")
print(f"Frete médio da Loja 2: {average_shipping_loja2}")
print(f"Frete médio da Loja 3: {average_shipping_loja3}")
print(f"Frete médio da Loja 4: {average_shipping_loja4}")

import matplotlib.pyplot as plt
# Dados dos fretes médios (substitua pelos seus valores reais)
average_shipping = {
    'Loja 1': average_shipping_loja1,
    'Loja 2': average_shipping_loja2,
    'Loja 3': average_shipping_loja3,
    'Loja 4': average_shipping_loja4
}

# Criar o gráfico de barras
lojas = list(average_shipping.keys())
shipping_costs = list(average_shipping.values())

plt.figure(figsize=(10, 6))
plt.bar(lojas, shipping_costs, color=['skyblue', 'lightcoral', 'lightgreen', 'lightgoldenrodyellow'])
plt.xlabel('Lojas')
plt.ylabel('Frete Médio')
plt.title('Frete Médio por Loja')

# Adicionar os valores de frete médio em cima de cada barra
for i, v in enumerate(shipping_costs):
    plt.text(i, v + 0.1, f'{v:.2f}', ha='center')

plt.show()

"""# 6. Relatório"""

print("Relatório de Análise das Lojas")
print("Este relatório apresenta uma análise comparativa do desempenho das quatro lojas, considerando diferentes indicadores chave, para auxiliar na tomada de decisão sobre investimentos.")

print("\n 1. Faturamento Total")
print(f"Faturamento Loja 1: R${total_loja1:.2f}*")
print(f"Faturamento Loja 2: R${total_loja2:.2f}")
print(f"Faturamento Loja 3: R${total_loja3:.2f}")
print(f"Faturamento Loja 4: R${total_loja4:.2f}")

# Recomendação baseada no faturamento (pode ser ajustado)
if total_loja1 == max(faturamento):
    print("Recomendação: Loja 1 apresenta o maior faturamento, indicando um potencial maior para investimento.")
elif total_loja2 == max(faturamento):
    print("Recomendação: Loja 2 apresenta o maior faturamento, indicando um potencial maior para investimento.")
elif total_loja3 == max(faturamento):
    print("Recomendação: Loja 3 apresenta o maior faturamento, indicando um potencial maior para investimento.")
else:
    print("Recomendação: Loja 4 apresenta o maior faturamento, indicando um potencial maior para investimento.")


print("\n 2. Análise de Vendas por Categoria")
print("Gráficos de barras detalhados para cada loja, mostrando o faturamento por categoria, foram gerados anteriormente.")

print("\n 3. Avaliação dos Clientes")
print(f"Média de avaliação da Loja 1: {average_rating_loja1:.2f}")
print(f"Média de avaliação da Loja 2: {average_rating_loja2:.2f}")
print(f"Média de avaliação da Loja 3: {average_rating_loja3:.2f}*")
print(f"Média de avaliação da Loja 4: {average_rating_loja4:.2f}")

# Comparação das avaliações
if average_rating_loja1 > 4.0:
    print("Avaliacao da loja 1 acima da média, indicando grande satisfação dos clientes.")

# Considerações adicionais sobre as avaliações das outras lojas
print("\n 4. Produtos Mais e Menos Vendidos")
print("Informações sobre os produtos mais e menos vendidos de cada loja foram impressas anteriormente.")



print("\n 5. Custo de Frete Médio")
print(f"Frete médio da Loja 1: {average_shipping_loja1:.2f}")
print(f"Frete médio da Loja 2: {average_shipping_loja2:.2f}")
print(f"Frete médio da Loja 3: {average_shipping_loja3:.2f}")
print(f"Frete médio da Loja 4: {average_shipping_loja4:.2f}*")

# Considerações sobre o frete médio de cada loja

print("\nConclusões e Recomendações Finais")
print("Baseado na análise realizada, recomenda-se uma avaliação mais aprofundada da loja com maior faturamento e melhor avaliação.")
print("Considerar também o custo de frete e a performance individual de cada produto para uma tomada de decisão mais assertiva.")